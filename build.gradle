apply plugin: 'com.github.ben-manes.versions'

buildscript {
  apply from: "dependencies/versions.gradle"

  addRepos(repositories)

  dependencies {
    classpath deps.android_gradle_plugin
    //检查版本更新  ./gradlew dependencyUpdates -Drevision=release
    classpath deps.lib_versions
    classpath deps.kotlin.plugin
  }
  repositories {
    google()
  }
}

allprojects {
  addGitVersion(gitVersionTag(), gitVersionCode())

  addRepos(repositories)
}

subprojects {
  def isModule = false
  def isAppModule = isModule || it.name == "app"
  def dataBindingModules = ["app"]
  //使用dataBinding的模块
  def enableDataBinding = dataBindingModules.contains(it.name)

  apply plugin: isAppModule ? 'com.android.application' : 'com.android.library'
  apply plugin: 'kotlin-android'
  apply plugin: 'kotlin-android-extensions' // 拓展
  apply plugin: 'kotlin-kapt'

  android {
    compileSdkVersion build_versions.compile_sdk
    defaultConfig {
      if (isAppModule) applicationId "com.mrtan.tablayoutsamples" //这里改成项目id
      minSdkVersion build_versions.min_sdk
      targetSdkVersion build_versions.target_sdk

      versionCode build_versions.androidVersionCode
      versionName build_versions.androidVersionName
      testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
      multiDexEnabled true
      resConfigs "en","es"
      ndk {
        abiFilters 'armeabi-v7a'
      }
    }

    compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8
    }

    if (enableDataBinding) {
      dataBinding {
        enabled true
      }
    }

    lintOptions {
      abortOnError false
    }
  }

  dependencies {
    implementation deps.kotlin.stdlib.jdk
  }

}

def gitVersionCode() {
  def out = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-list', 'HEAD', '--count'
    standardOutput = out
  }
  return out.toString().toInteger() + 200
}

def gitVersionTag() {
  def out = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'describe', '--tags'
    standardOutput = out
  }
  return out.toString().trim()
}
task clean(type: Delete) {
  delete rootProject.buildDir
}
